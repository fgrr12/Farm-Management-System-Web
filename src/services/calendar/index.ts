import { callableFireFunction } from '@/utils/callableFireFunction'

const getCalendarEvents = async (
	farmUuid: string,
	startDate?: string,
	endDate?: string,
	date?: string
) => {
	// API requires either 'date' OR both 'startDate' and 'endDate', but not both combinations
	let requestParams: any

	if (date) {
		// Get events for a specific day
		requestParams = {
			operation: 'getCalendarEvents',
			farmUuid,
			date,
		}
	} else if (startDate && endDate) {
		// Get events for a date range
		requestParams = {
			operation: 'getCalendarEvents',
			farmUuid,
			startDate,
			endDate,
		}
	} else {
		throw new Error('Either date or both startDate and endDate must be provided')
	}

	try {
		const response = await callableFireFunction<{
			success: boolean
			data: CalendarEvent[]
			count: number
		}>('calendar', requestParams)

		return response.data
	} catch (error) {
		console.error('Error calling calendar API:', error)
		throw error
	}
}

const getCalendarEventByUuid = async (_eventUuid: string) => {
	// This operation doesn't exist in the current API
	throw new Error('getCalendarEventByUuid operation not supported')
}

const createCalendarEvent = async (
	eventData: Omit<CalendarEvent, 'uuid' | 'createdAt' | 'updatedAt' | 'farmUuid' | 'createdBy'>,
	userUuid: string,
	farmUuid: string
): Promise<{ uuid: string; isNew: boolean }> => {
	const response = await callableFireFunction<{
		success: boolean
		data: { uuid: string; isNew: boolean }
	}>('calendar', {
		operation: 'upsertCalendarEvent',
		eventData: {
			...eventData,
			farmUuid,
			createdBy: userUuid,
			isAutoGenerated: eventData.isAutoGenerated || false,
			status: eventData.status || 'pending',
		},
		userUuid,
	})
	return response.data
}

const updateCalendarEvent = async (
	eventData: Partial<CalendarEvent> & { uuid: string },
	userUuid: string
) => {
	const response = await callableFireFunction<{
		success: boolean
		data: { uuid: string; isNew: boolean }
	}>('calendar', {
		operation: 'upsertCalendarEvent',
		eventData,
		userUuid,
	})
	return response.data
}

const updateCalendarEventStatus = async (
	eventUuid: string,
	status: CalendarEvent['status'],
	updatedBy: string
) => {
	const response = await callableFireFunction<{ success: boolean }>('calendar', {
		operation: 'updateCalendarEventStatus',
		eventUuid,
		status,
		updatedBy,
	})
	return response
}

const deleteCalendarEvent = async (eventUuid: string, userUuid: string) => {
	// Delete operation is not available in the current API
	// Instead, we'll mark the event as cancelled
	console.warn('Delete operation not available. Marking event as cancelled instead.')
	return await updateCalendarEventStatus(eventUuid, 'cancelled', userUuid)
}

// Legacy methods - keeping for backward compatibility but they may not work with current API
const getAnimalEvents = async (animalUuid: string) => {
	// This operation doesn't exist in the new API, but keeping for compatibility
	console.warn('getAnimalEvents operation may not be supported in current API')
	const response = await callableFireFunction<{
		success: boolean
		data: CalendarEvent[]
		count: number
	}>('calendar', {
		operation: 'getAnimalEvents',
		animalUuid,
	})
	return response.data
}

const createHealthRecordEvents = async (healthRecord: any, farmUuid: string, userUuid: string) => {
	// This operation doesn't exist in the new API, but keeping for compatibility
	console.warn('createHealthRecordEvents operation may not be supported in current API')
	const response = await callableFireFunction<{ success: boolean }>('calendar', {
		operation: 'createHealthRecordEvents',
		healthRecord,
		farmUuid,
		userUuid,
	})
	return response
}

const updateAnimalHealthEvents = async (
	animalUuid: string,
	oldStatus: string,
	newStatus: string
) => {
	// This operation doesn't exist in the new API, but keeping for compatibility
	console.warn('updateAnimalHealthEvents operation may not be supported in current API')
	const response = await callableFireFunction<{ success: boolean }>('calendar', {
		operation: 'updateAnimalHealthEvents',
		animalUuid,
		oldStatus,
		newStatus,
	})
	return response
}

export const CalendarService = {
	getCalendarEvents,
	getCalendarEventByUuid,
	createCalendarEvent,
	updateCalendarEvent,
	updateCalendarEventStatus,
	deleteCalendarEvent,
	getAnimalEvents,
	createHealthRecordEvents,
	updateAnimalHealthEvents,
}
